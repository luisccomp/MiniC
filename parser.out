Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LITINT
    PTOVIRG
    RETURN

Grammar

Rule 0     S' -> programa
Rule 1     programa -> lista_dec_externas
Rule 2     lista_dec_externas -> <empty>
Rule 3     lista_dec_externas -> lista_dec_externas dec_externa
Rule 4     dec_externa -> dec_funcao
Rule 5     dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE
Rule 6     lista_comandos -> <empty>
Rule 7     argumento -> tipo_primitivo ID
Rule 8     lista_argumentos -> <empty>
Rule 9     lista_argumentos -> argumento
Rule 10    lista_argumentos -> lista_argumentos VIRG argumento
Rule 11    tipo_retorno -> tipo_primitivo
Rule 12    tipo_retorno -> VOID
Rule 13    tipo_primitivo -> INT
Rule 14    tipo_primitivo -> FLOAT

Terminals, with rules where they appear

ACHAVE               : 5
APAR                 : 5
FCHAVE               : 5
FLOAT                : 14
FPAR                 : 5
ID                   : 5 7
INT                  : 13
LITINT               : 
PTOVIRG              : 
RETURN               : 
VIRG                 : 10
VOID                 : 12
error                : 

Nonterminals, with rules where they appear

argumento            : 9 10
dec_externa          : 3
dec_funcao           : 4
lista_argumentos     : 5 10
lista_comandos       : 5
lista_dec_externas   : 1 3
programa             : 0
tipo_primitivo       : 7 11
tipo_retorno         : 5

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . lista_dec_externas
    (2) lista_dec_externas -> .
    (3) lista_dec_externas -> . lista_dec_externas dec_externa

    VOID            reduce using rule 2 (lista_dec_externas -> .)
    INT             reduce using rule 2 (lista_dec_externas -> .)
    FLOAT           reduce using rule 2 (lista_dec_externas -> .)
    $end            reduce using rule 2 (lista_dec_externas -> .)

    programa                       shift and go to state 1
    lista_dec_externas             shift and go to state 2

state 1

    (0) S' -> programa .



state 2

    (1) programa -> lista_dec_externas .
    (3) lista_dec_externas -> lista_dec_externas . dec_externa
    (4) dec_externa -> . dec_funcao
    (5) dec_funcao -> . tipo_retorno ID APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE
    (11) tipo_retorno -> . tipo_primitivo
    (12) tipo_retorno -> . VOID
    (13) tipo_primitivo -> . INT
    (14) tipo_primitivo -> . FLOAT

    $end            reduce using rule 1 (programa -> lista_dec_externas .)
    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    dec_externa                    shift and go to state 3
    dec_funcao                     shift and go to state 4
    tipo_retorno                   shift and go to state 5
    tipo_primitivo                 shift and go to state 6

state 3

    (3) lista_dec_externas -> lista_dec_externas dec_externa .

    VOID            reduce using rule 3 (lista_dec_externas -> lista_dec_externas dec_externa .)
    INT             reduce using rule 3 (lista_dec_externas -> lista_dec_externas dec_externa .)
    FLOAT           reduce using rule 3 (lista_dec_externas -> lista_dec_externas dec_externa .)
    $end            reduce using rule 3 (lista_dec_externas -> lista_dec_externas dec_externa .)


state 4

    (4) dec_externa -> dec_funcao .

    VOID            reduce using rule 4 (dec_externa -> dec_funcao .)
    INT             reduce using rule 4 (dec_externa -> dec_funcao .)
    FLOAT           reduce using rule 4 (dec_externa -> dec_funcao .)
    $end            reduce using rule 4 (dec_externa -> dec_funcao .)


state 5

    (5) dec_funcao -> tipo_retorno . ID APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE

    ID              shift and go to state 10


state 6

    (11) tipo_retorno -> tipo_primitivo .

    ID              reduce using rule 11 (tipo_retorno -> tipo_primitivo .)


state 7

    (12) tipo_retorno -> VOID .

    ID              reduce using rule 12 (tipo_retorno -> VOID .)


state 8

    (13) tipo_primitivo -> INT .

    ID              reduce using rule 13 (tipo_primitivo -> INT .)


state 9

    (14) tipo_primitivo -> FLOAT .

    ID              reduce using rule 14 (tipo_primitivo -> FLOAT .)


state 10

    (5) dec_funcao -> tipo_retorno ID . APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE

    APAR            shift and go to state 11


state 11

    (5) dec_funcao -> tipo_retorno ID APAR . lista_argumentos FPAR ACHAVE lista_comandos FCHAVE
    (8) lista_argumentos -> .
    (9) lista_argumentos -> . argumento
    (10) lista_argumentos -> . lista_argumentos VIRG argumento
    (7) argumento -> . tipo_primitivo ID
    (13) tipo_primitivo -> . INT
    (14) tipo_primitivo -> . FLOAT

    FPAR            reduce using rule 8 (lista_argumentos -> .)
    VIRG            reduce using rule 8 (lista_argumentos -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    lista_argumentos               shift and go to state 12
    argumento                      shift and go to state 13
    tipo_primitivo                 shift and go to state 14

state 12

    (5) dec_funcao -> tipo_retorno ID APAR lista_argumentos . FPAR ACHAVE lista_comandos FCHAVE
    (10) lista_argumentos -> lista_argumentos . VIRG argumento

    FPAR            shift and go to state 15
    VIRG            shift and go to state 16


state 13

    (9) lista_argumentos -> argumento .

    FPAR            reduce using rule 9 (lista_argumentos -> argumento .)
    VIRG            reduce using rule 9 (lista_argumentos -> argumento .)


state 14

    (7) argumento -> tipo_primitivo . ID

    ID              shift and go to state 17


state 15

    (5) dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR . ACHAVE lista_comandos FCHAVE

    ACHAVE          shift and go to state 18


state 16

    (10) lista_argumentos -> lista_argumentos VIRG . argumento
    (7) argumento -> . tipo_primitivo ID
    (13) tipo_primitivo -> . INT
    (14) tipo_primitivo -> . FLOAT

    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    argumento                      shift and go to state 19
    tipo_primitivo                 shift and go to state 14

state 17

    (7) argumento -> tipo_primitivo ID .

    FPAR            reduce using rule 7 (argumento -> tipo_primitivo ID .)
    VIRG            reduce using rule 7 (argumento -> tipo_primitivo ID .)


state 18

    (5) dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR ACHAVE . lista_comandos FCHAVE
    (6) lista_comandos -> .

    FCHAVE          reduce using rule 6 (lista_comandos -> .)

    lista_comandos                 shift and go to state 20

state 19

    (10) lista_argumentos -> lista_argumentos VIRG argumento .

    FPAR            reduce using rule 10 (lista_argumentos -> lista_argumentos VIRG argumento .)
    VIRG            reduce using rule 10 (lista_argumentos -> lista_argumentos VIRG argumento .)


state 20

    (5) dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR ACHAVE lista_comandos . FCHAVE

    FCHAVE          shift and go to state 21


state 21

    (5) dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE .

    VOID            reduce using rule 5 (dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE .)
    INT             reduce using rule 5 (dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE .)
    FLOAT           reduce using rule 5 (dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE .)
    $end            reduce using rule 5 (dec_funcao -> tipo_retorno ID APAR lista_argumentos FPAR ACHAVE lista_comandos FCHAVE .)

